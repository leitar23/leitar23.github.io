<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据结构笔记</title>
      <link href="/posts/928debf2/"/>
      <url>/posts/928debf2/</url>
      
        <content type="html"><![CDATA[<h1 id="一、数据结构与算法"><a href="#一、数据结构与算法" class="headerlink" title="一、数据结构与算法"></a>一、数据结构与算法</h1><h2 id="1-数据结构"><a href="#1-数据结构" class="headerlink" title="1.数据结构"></a>1.数据结构</h2><ul><li>数据：是对客观事物的符号表示，如图像、声音等。</li><li>数据元素：是数据的基本单位。</li><li>数据项：是构成教据元素的不可分割的最小单位。<br>一个数据元素可由若干个数据项组成，例如，一位学生的信息记录为一个数据元素，它是由学号、姓名、性别等数据项组成。</li><li>数据对象：是具有相同性质的数据元素的集合。</li><li>数据结构：是相互之间存在一种或多种特定关系的数据元素的集合。<br>数据结构包括三方面的内容：<strong>逻辑结构、存储结构、数据的运算</strong><br>数据结构的形式定义为：数据结构是一个二元组<pre><code>   Data_Structure =（D,S）</code></pre>其中：D是数据元素的有限集，S是D上数据关系的有限集</li></ul><h3 id="1-1-逻辑结构"><a href="#1-1-逻辑结构" class="headerlink" title="1.1.逻辑结构"></a>1.1.逻辑结构</h3><p>逻辑结构是指数据元素之间的逻辑关系，与数据的存储无关，独立于计算机。<br><img src="https://lskypro.s3-us-east-1.ossfiles.com/2023/02/21/63f44ac8748ae.webp" alt="c5."></p><h3 id="1-2-存储结构"><a href="#1-2-存储结构" class="headerlink" title="1.2.存储结构"></a>1.2.存储结构</h3><p>存储结构（物理结构）是指数据结构在计算机中的表示，它包括数据元素的表示和关系的表示。<br>存储结构分为四种：顺序存储、链式存储、索引存储和散列存储</p><ul><li>顺序存储（常用）：把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现。</li><li>链式存储（常用）：借助指示元素存储地址的指针来表示元素之间的逻辑关系。 </li><li>索引存储：在存储元素信息时，建立索引表————索引项(关键字   地址)。</li><li>散列存储：对于元素的关键字根据散列函数直接计算出元素的存储地址，又称哈希（hash）存储。 </li></ul><h2 id="2-算法"><a href="#2-算法" class="headerlink" title="2.算法"></a>2.算法</h2><p>算法是对特定问题<strong>求解步骤</strong>的一种描述</p><h3 id="2-1-算法具有下列5个特性："><a href="#2-1-算法具有下列5个特性：" class="headerlink" title="2.1.算法具有下列5个特性："></a>2.1.算法具有下列5个特性：</h3><ol><li>有穷性，一个算法必须在执行有穷步骤后结束，每一步都要在有穷时间内完成。</li><li>确定性，算法中每条指令必须有确切的含义，相同的输入只能得到相同的输出。</li><li>可行性，算法中描述的操作都必须是可以执行的。</li><li>输入，一个算法有零个或多个输入。</li><li>输出，一个算法有一个或多个输出。</li></ol><h3 id="2-2-通常设计一个“好”的算法应考虑达到以下目标："><a href="#2-2-通常设计一个“好”的算法应考虑达到以下目标：" class="headerlink" title="2.2.通常设计一个“好”的算法应考虑达到以下目标："></a>2.2.通常设计一个“好”的算法应考虑达到以下目标：</h3><ol><li>正确性，算法应能够正确地求解问题。</li><li>可读性，算法能具有良好的可读性，以帮助人们理解。</li><li>健壮性，输入非法数据时，算法能适当地做出反应或进行处理，而不会产生莫名其妙的输出结果。</li><li>效率与低存储量需求，效率是指算法执行的时间，存储量需求是指算法执行过程中所需的最大存储空间。</li></ol><h3 id="2-3-算法效率的度量"><a href="#2-3-算法效率的度量" class="headerlink" title="2.3.算法效率的度量"></a>2.3.算法效率的度量</h3><p>算法效率的度量是通过<strong>时间复杂度</strong>和<strong>空间复杂度</strong>来描述的。<br>一个语句的频度：是指该语句在算法中被重复执行的次数。<br>算法中所有语句的频度之和记为 T(n)=O(f(n)),f(n)表示基本运算的频度，O(f(n))表示f(n)的数量级。<br>例子：f(n)=2n,则O(f(n))=n<br><img src="https://lskypro.s3-us-east-1.ossfiles.com/2023/02/21/63f44acea72c1.webp" alt="c6."><br><img src="https://lskypro.s3-us-east-1.ossfiles.com/2023/02/21/63f44ad30f4fb.webp" alt="c7."></p><h1 id="二、顺序表"><a href="#二、顺序表" class="headerlink" title="二、顺序表"></a>二、顺序表</h1><h2 id="1-线性表"><a href="#1-线性表" class="headerlink" title="1.线性表"></a>1.线性表</h2><h3 id="1-1-线性表的定义"><a href="#1-1-线性表的定义" class="headerlink" title="1.1.线性表的定义"></a>1.1.线性表的定义</h3><p>线性表：具有相同数据类型的n(n≥0)个数据元素的有限序列。<br><img src="https://lskypro.s3-us-east-1.ossfiles.com/2023/02/21/63f44ad8b69fb.webp" alt="C8."><br>除第一个元素外，每个元素有且仅有一个直接前驱。（a1是a2的直接前驱，a2是a3的直接前驱，以此类推）<br>除最后一个元素外，每个元素有且仅有一个直接后继。（a3是a2的直接后继，a2是a1的直接后继，以此类推）</p><h3 id="1-2-线性表的基本操作"><a href="#1-2-线性表的基本操作" class="headerlink" title="1.2.线性表的基本操作"></a>1.2.线性表的基本操作</h3><p><img src="https://lskypro.s3-us-east-1.ossfiles.com/2023/02/21/63f44adf3b08d.webp" alt="c9."></p><h2 id="2-顺序表的结构"><a href="#2-顺序表的结构" class="headerlink" title="2.顺序表的结构"></a>2.顺序表的结构</h2><h3 id="2-1-顺序表的定义"><a href="#2-1-顺序表的定义" class="headerlink" title="2.1.顺序表的定义"></a>2.1.顺序表的定义</h3><p>顺序表：顺序存储的线性表，它是由一组地址连续的存储单元依次存储线性表中的数据元素，从而使得逻辑上相邻的两个元素在物理位置上也相邻。（用数组存储）<br><img src="https://lskypro.s3-us-east-1.ossfiles.com/2023/02/21/63f44aec47a13.webp" alt="c10."></p><h3 id="2-2-顺序表的类型描述"><a href="#2-2-顺序表的类型描述" class="headerlink" title="2.2.顺序表的类型描述"></a>2.2.顺序表的类型描述</h3><p>假定线性表的元素类型为 ElemType，则线性表的顺序存储类型描述为<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 50           <span class="comment">//定义线性表的最大长度 </span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span>              <span class="comment">//把结构体改名为SqList</span></span><br><span class="line">   ElemType data[MaxSize];   <span class="comment">//顺序表的元素 </span></span><br><span class="line">   <span class="type">int</span> length;               <span class="comment">//顺序表的当前长度 </span></span><br><span class="line">&#125;SqList;                     <span class="comment">//顺序表的类型定义</span></span><br></pre></td></tr></table></figure><br>上述一维数组是属于静态分配，由于数组的大小和空间事先已经固定，一旦空间占满，再加入新的数据将会产生溢出，进而导致程序崩溃。</p><hr><p>而在动态分配时，存储数组的空间是在程序执行过程中通过动态存储分配语句分配的，一旦数据空间占满，就另外开辟一块更大的存储空间，用以替换原来的存储空间，从而达到扩充存储数据空间的目的，而不需要为线性表一次性地划分所有空间。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> InitSize 50        <span class="comment">//表长度的初始定义 </span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span> </span><br><span class="line">   ElemType *data;         <span class="comment">//指示动态分配数组的指针 </span></span><br><span class="line">   <span class="type">int</span> MaxSize,length;     <span class="comment">//数组的最大容量和当前个数 </span></span><br><span class="line">&#125;SeqList;                  <span class="comment">//动态分配数组顺序表的类型定义</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C 语言的初始动态分配语句为 </span><br><span class="line">L.data=(ElemType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ElemType)*InitSize);</span><br></pre></td></tr></table></figure></p><h3 id="2-3-顺序表的特点"><a href="#2-3-顺序表的特点" class="headerlink" title="2.3.顺序表的特点"></a>2.3.顺序表的特点</h3><ol><li>顺序表最主要的特点是随机存取，即通过首地址和元素序号可在时间O(1)内找到指定的元素。</li><li>顺序表的存储密度高，每个结点只存储数据元素。</li><li>顺序表逻辑上相邻的元素物理上也相邻，所以插入和删除操作需要移动大量元素。</li></ol><h2 id="3-顺序表的实现"><a href="#3-顺序表的实现" class="headerlink" title="3.顺序表的实现"></a>3.顺序表的实现</h2><h3 id="3-1-插入操作"><a href="#3-1-插入操作" class="headerlink" title="3.1.插入操作"></a>3.1.插入操作</h3><p>从16开始依次往后移一位，再插入50<br><img src="https://lskypro.s3-us-east-1.ossfiles.com/2023/02/21/63f44af034cb7.webp" alt="c11."><br>在顺序表L的第i(1 ≤ i ≤ L.length+1)个位置插入新元素e。若i的输入不合法，则返回false，表示插入失败；否则，将顺序表的第i个元素及其后的所有元素右移一个位置，腾出一个空位置插入新元素e，顺序表长度增加1，插入成功，返回true。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">ListInsert</span><span class="params">(SqList &amp;L,<span class="type">int</span> i,ElemType e)</span>&#123;  <span class="comment">//布尔类型</span></span><br><span class="line">   <span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;L.length+<span class="number">1</span>)                      <span class="comment">//判断i的范围是否有效（合法）</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> j=L.length;j&gt;=i;j--)               <span class="comment">//将第i个元素及之后的元素后移 </span></span><br><span class="line">      L.data[j]=L.data[j<span class="number">-1</span>];                  <span class="comment">//赋值</span></span><br><span class="line">   L.data[i<span class="number">-1</span>]=e;                             <span class="comment">//在位置i处放入e</span></span><br><span class="line">   L.length++;                                <span class="comment">//线性表长度增加1</span></span><br><span class="line">   <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></p><pre><code>插入操作移动结点的平均次数为 n/2,所以插入算法的平均时间复杂度为O(n)</code></pre><h3 id="3-2-删除操作"><a href="#3-2-删除操作" class="headerlink" title="3.2.删除操作"></a>3.2.删除操作</h3><p><img src="https://lskypro.s3-us-east-1.ossfiles.com/2023/02/21/63f44af3cd8ec.webp" alt="c12.webp"><br>删除线性表L中第i(1 ≤ i ≤ L.length+1)个位置的元素，若成功则返回true，并将被删除的元素用引用变量e返回，否则返回false。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">ListDelete</span><span class="params">(SqList &amp;L,<span class="type">int</span> i,ElemType &amp;e)</span>&#123; </span><br><span class="line">   <span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;L.length)                         <span class="comment">//判断i的范围是否有效（合法）</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">   e=L.data[i<span class="number">-1</span>];                              <span class="comment">//将被删除的元素赋给e</span></span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;L.length;j++)                 <span class="comment">//将第i个位置后的元素前移 </span></span><br><span class="line">      L.data[j<span class="number">-1</span>]=L.data[j]; </span><br><span class="line">   L.length--;                                  <span class="comment">//线性表长度减1</span></span><br><span class="line">   <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>    删除操作移动结点的平均次数为 (n-1)/2,平均时间复杂度为O(n)</p><h3 id="3-3-按值查找操作"><a href="#3-3-按值查找操作" class="headerlink" title="3.3.按值查找操作"></a>3.3.按值查找操作</h3><p>在顺序表L中查找第一个元素值等于e的元素，并返回其位序(是第几个值)。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">LocateElem</span><span class="params">(SqList L,ElemType e)</span>&#123;          <span class="comment">//int类型</span></span><br><span class="line">    <span class="type">int</span> i; </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;L.length;i++)                   <span class="comment">//i 的初值赋为0</span></span><br><span class="line">        <span class="keyword">if</span>(L.data[i]==e)                      <span class="comment">//判断i是否等于e</span></span><br><span class="line">           <span class="keyword">return</span> i+<span class="number">1</span>;                        <span class="comment">//下标为i的元素值等于e，返回其位序 </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;                                 <span class="comment">//退出循环，说明查找失败 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-4-按位查找操作"><a href="#3-4-按位查找操作" class="headerlink" title="3.4.按位查找操作"></a>3.4.按位查找操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">GetElem</span><span class="params">(SqList L,<span class="type">int</span> i)</span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;L.length)                    <span class="comment">//判断i的范围是否有效 </span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;                            <span class="comment">//若无效，则返回0</span></span><br><span class="line">    <span class="keyword">return</span> L.data[i<span class="number">-1</span>];                    <span class="comment">//有效，返回数组下标为i-1的元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库笔记</title>
      <link href="/posts/aaba1da3/"/>
      <url>/posts/aaba1da3/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><h2 id="1-数据库系统概述"><a href="#1-数据库系统概述" class="headerlink" title="1.数据库系统概述"></a>1.数据库系统概述</h2><h3 id="1-1-数据（Data）"><a href="#1-1-数据（Data）" class="headerlink" title="1.1. 数据（Data）"></a>1.1. 数据（Data）</h3><p>是数据库中存储的基本对象</p><h3 id="1-2-数据库（DataBase，简称DB）"><a href="#1-2-数据库（DataBase，简称DB）" class="headerlink" title="1.2.数据库（DataBase，简称DB）"></a>1.2.数据库（DataBase，简称DB）</h3><p>数据库是长期<strong>存储在计算机内、有组织的、可共享的</strong>数据集合。<br>数据库中的数据按一定的数据模型描述、组织和储存，具有较小的冗余度、较高的数据独立性和易扩展性，可为用户共享。<br>数据库中的数据要求具有两个特性：（1）整体性；（2）共享性</p><h3 id="1-3-数据库管理系统（DataBase-Management-System，简称DBMS）"><a href="#1-3-数据库管理系统（DataBase-Management-System，简称DBMS）" class="headerlink" title="1.3.数据库管理系统（DataBase Management System，简称DBMS）"></a>1.3.数据库管理系统（DataBase Management System，简称DBMS）</h3><p>数据库管理系统是专门用于建立和管理数据库的一套软件，介于应用程序和操作系统之间 (位于用户和数据库之间)。</p><h3 id="1-4-数据库系统（DataBase-System，简称DBS）"><a href="#1-4-数据库系统（DataBase-System，简称DBS）" class="headerlink" title="1.4.数据库系统（DataBase System，简称DBS）"></a>1.4.数据库系统（DataBase System，简称DBS）</h3><p>数据库系统 = 数据库（DB）+数据库管理系统（DBMS）+应用程序+数据库管理员。</p><h3 id="1-5-数据库系统的特点"><a href="#1-5-数据库系统的特点" class="headerlink" title="1.5.数据库系统的特点"></a>1.5.数据库系统的特点</h3><ol><li>数据结构化</li><li>数据的共享性高、冗余度低、易扩充</li><li>数据独立性高：物理独立性+逻辑独立性</li><li>数据由数据库管理系统DBMS统一管理和控制</li></ol><h2 id="2-数据模型"><a href="#2-数据模型" class="headerlink" title="2.数据模型"></a>2.数据模型</h2><p>现实——&gt;(概念模型)——&gt;信息——&gt;(数据模型)——&gt;数据<br>码(Key):能唯一标识每个实体的属性或属性集<br>数据模型通常由数据结构、数据操作和完整性约束三要素组成。</p><h3 id="2-1-✒️常用的数据模型"><a href="#2-1-✒️常用的数据模型" class="headerlink" title="2.1.✒️常用的数据模型"></a>2.1.✒️常用的数据模型</h3><p><strong>层次模型、网状模型、关系模型</strong><br>层次模型：</p><ol><li>仅允许自顶向下的单项查询</li><li>适合表示一对多联系</li><li>数据依赖性强，上层记录不存在时，下层记录无法储存</li><li>语义完整性差，某些数据只有从上下层关系查看时，才能显示全部含义</li></ol><p>网状模型：</p><ol><li>一个子结点可以有多个父结点；在两个结点之间可以有两种或多种联系</li><li>可从网络中任一结点查询；沿着网络中的路径按任意方向查询</li><li>结构越复杂，其功能越强，操作也越复杂，操作语言也越复杂</li></ol><p>关系模型：</p><ol><li>描述的一致性</li><li>利用公共属性连接</li><li>结构简单直观</li><li>有严格的理论基础</li><li>语言表达简练</li></ol><h2 id="3-✒️数据库系统结构"><a href="#3-✒️数据库系统结构" class="headerlink" title="3.✒️数据库系统结构"></a>3.✒️数据库系统结构</h2><h3 id="3-1-三级模式结构"><a href="#3-1-三级模式结构" class="headerlink" title="3.1.三级模式结构"></a>3.1.三级模式结构</h3><p>数据库系统的三级模式结构由<strong>外模式（用户级）</strong>、<strong>模式（概念级）</strong>、<strong>内模式（物理级）</strong> 组成。<br>在这种模式下，形成了二级映像，实现了数据的独立性。<br><img src="https://lskypro.s3-us-east-1.ossfiles.com/2023/02/21/63f449ebea31e.webp" alt="c4."></p><ol><li>模式：也称<strong>逻辑模式和概念模式</strong>，是数据库中<strong>全体数据逻辑结构和特征的描述</strong>，是所有用户的公共数据视图</li><li>外模式：也称<strong>子模式或用户模式</strong>，它是用以描述用户看到或使用的数据的<strong>局部</strong>逻辑结构和特性的，描述<strong>用户所看到的数据视图</strong>，它是用户和数据库的接口</li><li>内模式：也称<strong>存储模式</strong>，它是<strong>数据物理结构和存储方式的描述</strong>，是数据在数据库内部的表示方式</li></ol><h3 id="3-2-数据库系统二级映像"><a href="#3-2-数据库系统二级映像" class="headerlink" title="3.2.数据库系统二级映像"></a>3.2.数据库系统二级映像</h3><p>外模式/模式映像：<br>当<strong>模式</strong>改变时，外模式/模式映像改变，使<strong>外模式和应用程序</strong>不变，这保证了<strong>数据的逻辑独立性</strong>。<br>模式/内模式映像：<br>当<strong>内模式</strong>改变时，模式/内模式映像改变，使<strong>模式</strong>保持不变，这保证了<strong>数据的物理独立性</strong>。</p><h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><h2 id="1-关系数据模型"><a href="#1-关系数据模型" class="headerlink" title="1.关系数据模型"></a>1.关系数据模型</h2><h3 id="1-1-✒️关系数据模型的构成"><a href="#1-1-✒️关系数据模型的构成" class="headerlink" title="1.1.✒️关系数据模型的构成"></a>1.1.✒️关系数据模型的构成</h3><p>✒️（1）<strong>关系数据模型由关系数据结构、关系操作集合和关系完整性约束3个部分组成。</strong><br>域:一组具有相同数据类型的值的集合<br>笛卡儿积:域上的一种集合运算<br>✒️关系模型允许定义3类完整性约束，即 <strong>实体完整性、参照完整性、用户定义的完整性。</strong><br>（2）关系的性质</p><ul><li>关系中的每一个属性值都是不可分解的</li><li>关系中不允许出现重复元组（行）</li><li>不考虑行列的顺序</li><li>列是同质的，即这一列具有相同的数据类型</li></ul><p>✒️（3）关系（数据库）的完整性：<strong>实体完整性规则、参照完整性规则、用户定义完整性规则。</strong></p><ol><li>实体完整性规则：主码不能为空，且主码整体取值也不为空</li><li>参照完整性规则：如果属性集K是R1的外键，同时K也是R2的属性，但不是R2的主键，那么K为R2的外键。在R2中，K的取值只允许有两种可能：①、空值；②、不为空时，等于R1关系中某个主键值。</li><li>用户定义的完整性规则：用户针对具体的数据约束，设置完整性规则。</li></ol><h3 id="1-2-基本术语"><a href="#1-2-基本术语" class="headerlink" title="1.2.基本术语"></a>1.2.基本术语</h3><ol><li>关系 ：规范的二维表</li><li>属性 ：二维表中的<strong>列</strong>称为属性</li><li>值域 ：二维表中属性的取值范围</li><li>元组 ：二维表中的<strong>行</strong>称为元组</li><li>分量 ：元组中的每一个属性值称为元组的一个分量</li><li>候选码 ：如果一个属性集的值能唯一标识一个关系的元组且不含多余的属性，称该属性集为候选码。</li><li>主键 ：一个关系中可有多个候选码，可以选其中一个作为主键。每一个关系都有且只有一个主键</li><li>主属性 ：包含在任一候选码中的属性</li><li>非主属性 ：不包含在任一候选码中的属性</li><li>外键 ：如果关系模式R中的属性K是其他关系模式的主键，则K在关系模式R中称为外键。</li><li>全码 ：若关系中只有一个候选码，且这个候选码中包含全部属性，则该候选码为全码。</li></ol><h2 id="2-关系代数"><a href="#2-关系代数" class="headerlink" title="2.关系代数"></a>2.关系代数</h2><h1 id="第三章、结构化查询语句SQL"><a href="#第三章、结构化查询语句SQL" class="headerlink" title="第三章、结构化查询语句SQL"></a>第三章、结构化查询语句SQL</h1><p>SQL语言的特点：</p><ol><li>综合统一</li><li>高度非过程化</li><li>面向集合的操作方式</li><li>用同一种语法结构提供两种使用方式</li><li>语言简洁，易学易用</li></ol><hr><pre><code>SELECT 查询、CREATE 创建、DROP 删除、ALTER 修改、ADD增加INSERT 插入数据、UPDATE 修改数据、DELETE 删除数据</code></pre><h2 id="1-数据定义语句"><a href="#1-数据定义语句" class="headerlink" title="1.数据定义语句"></a>1.数据定义语句</h2><h3 id="1-1-基本表的创建"><a href="#1-1-基本表的创建" class="headerlink" title="1.1.基本表的创建"></a>1.1.基本表的创建</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">    prj_num <span class="type">char</span>(<span class="number">8</span>)  <span class="keyword">PRIMARY</span> KEY,     <span class="comment">/**列名 数据类型 列级完整性约束条件**/</span></span><br><span class="line">    prj_name <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">    start_date datetime,</span><br><span class="line">    end_date datetime,</span><br><span class="line">    prj_status bit,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="1-2-基本表的修改"><a href="#1-2-基本表的修改" class="headerlink" title="1.2.基本表的修改"></a>1.2.基本表的修改</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> 新列名 数据类型；  <span class="comment">-- 添加列</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> 列名;   <span class="comment">-- 删除列</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> 列名 数据类型;   <span class="comment">-- 将表的某一列的数据类型修改;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-基本表的删除"><a href="#1-3-基本表的删除" class="headerlink" title="1.3.基本表的删除"></a>1.3.基本表的删除</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></table></figure><h2 id="2-查询"><a href="#2-查询" class="headerlink" title="2.查询"></a>2.查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 目标列表达式     <span class="comment">---列   所查内容</span></span><br><span class="line"><span class="keyword">FROM</span> 表名或视图名       <span class="comment">---来自那些表</span></span><br><span class="line">[<span class="keyword">WHERE</span><span class="operator">&lt;</span>条件表达式<span class="operator">&gt;</span>]     <span class="comment">---条件</span></span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> 列名<span class="number">1</span> [<span class="keyword">HAVING</span> <span class="operator">&lt;</span>条件表达式<span class="operator">&gt;</span>]]</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名<span class="number">2</span> [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>]];    </span><br></pre></td></tr></table></figure><pre><code>如果有GROUP BY子句，则将结果按&lt;列名1&gt;的值进行分组，该属性列值相等的元组为一个组；如果GROUP BY子句带有HAVING短语，则只有满足HAVING后面指定条件的组才给予输出。如果有ORDER BY子句，则结果表要按&lt;列名2&gt;的值升序或降序排序。</code></pre><h3 id="2-1-单表查询"><a href="#2-1-单表查询" class="headerlink" title="2.1.单表查询"></a>2.1.单表查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> mat_num,mat_name,speci  <span class="comment">-- 查询三个列</span></span><br><span class="line"><span class="keyword">FROM</span> Stock;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>                       <span class="comment">-- 查询所有列</span></span><br><span class="line"><span class="keyword">FROM</span> Stock;</span><br></pre></td></tr></table></figure><p><strong>(1)datediff 日期函数</strong></p><pre><code>&lt;目标列表达式&gt;可以是表中存在的属性列,也可以是表达式、字符串常量或函数函数 datediff(datepart,date1,date2)   返回date1和date2的时间间隔,其单位由datepart决定</code></pre><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">datediff(datepart,date1,date2)  <span class="comment">-- 格式</span></span><br><span class="line">例子</span><br><span class="line"><span class="keyword">SELECT</span> prj_name, start_date, end_date, datediff(<span class="keyword">day</span>,start_date,end_date)</span><br><span class="line"><span class="keyword">FROM</span> Salvaging;</span><br></pre></td></tr></table></figure><p>✒️ <strong>(2)去掉表中的重复行 (DISTINCT)</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> 名称</span><br><span class="line"><span class="keyword">FROM</span> 名称;</span><br></pre></td></tr></table></figure><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> warehouse</span><br><span class="line"><span class="keyword">FROM</span> Stock;</span><br></pre></td></tr></table></figure><br><strong>(3)WHERE子句常用的查询条件</strong><br>1.比较运算符:=、&gt;、&lt;、&gt;=、&lt;=、NOT<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>查询供电局<span class="number">1</span>中存放的所有物资编号、名称、规格、数量</span><br><span class="line"><span class="keyword">SELECT</span> mat_num,mat_name,speci,amount</span><br><span class="line"><span class="keyword">FROM</span> Stock</span><br><span class="line"><span class="keyword">WHERE</span> warehouse <span class="operator">=</span> <span class="string">&#x27;供电局1&#x27;</span>;</span><br><span class="line"><span class="number">2.</span>查询所有单价小于<span class="number">80</span>的物资名称、数量、单价</span><br><span class="line"><span class="keyword">SELECT</span> mat_name,amount,unit</span><br><span class="line"><span class="keyword">FROM</span> Stock</span><br><span class="line"><span class="keyword">WHERE</span> unit <span class="operator">&lt;</span> <span class="number">80</span>;  <span class="comment">-- 或  WHERE NOT unit &gt;= 80</span></span><br></pre></td></tr></table></figure><br>2.确定范围的查询:BETWEEN…AND、NOT BETWEEN…AND<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查询单价在<span class="number">50</span><span class="operator">~</span><span class="number">100</span>的物资名称、数量及其单价</span><br><span class="line"><span class="keyword">SELECT</span> mat_name,amount,unit</span><br><span class="line"><span class="keyword">FROM</span> Stock</span><br><span class="line"><span class="keyword">WHERE</span> unit <span class="keyword">BETWEEN</span> <span class="number">50</span> <span class="keyword">AND</span> <span class="number">100</span>;</span><br></pre></td></tr></table></figure><br>3.确定集合的查询:IN、NOT IN<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>查询存放在供电局<span class="number">1</span>和供电局<span class="number">2</span>的物资名称、规格、数量</span><br><span class="line"><span class="keyword">SELECT</span> mat_name,speci,amount</span><br><span class="line"><span class="keyword">FROM</span> Stock</span><br><span class="line"><span class="keyword">WHERE</span> warehouse <span class="keyword">IN</span> (<span class="string">&#x27;供电局1&#x27;</span>,<span class="string">&#x27;供电局2&#x27;</span>);</span><br><span class="line"><span class="number">2.</span>查询没有存放在供电局<span class="number">1</span>和供电局<span class="number">2</span>的物资名称、规格、数量</span><br><span class="line"><span class="keyword">SELECT</span> mat_name,speci,amount</span><br><span class="line"><span class="keyword">FROM</span> Stock</span><br><span class="line"><span class="keyword">WHERE</span> warehouse <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;供电局1&#x27;</span>,<span class="string">&#x27;供电局2&#x27;</span>);</span><br></pre></td></tr></table></figure><br>✒️4.字符匹配的查询:LIKE、NOT LIKE。(用于查找与指定列名相匹配的元组)<br>[NOT] LINK ‘匹配符’<br>—- % (百分号)代表任意长度的字符串。例 a%b:表示以a开头,以b结尾的任意长度的字符串<br>—- _ (下横线)代表任意单个字符。例 a_b:表示以a开头,以b结尾的长度为3的任意字符串<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查询所有绝缘电线的物资编号、名称、规格</span><br><span class="line"><span class="keyword">SELECT</span> mat_num,mat_name,speci</span><br><span class="line"><span class="keyword">FROM</span> Stock</span><br><span class="line"><span class="keyword">WHERE</span> mat_name <span class="keyword">LIKE</span> <span class="string">&#x27;%绝缘电线&#x27;</span>;</span><br></pre></td></tr></table></figure><br>5.空值:IS NULL、IS NOT NULL。(判断取值是否为空)<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查询无库存单价的物资编号、名称</span><br><span class="line"><span class="keyword">SELECT</span> mat_num,mat_name</span><br><span class="line"><span class="keyword">FROM</span> Stock</span><br><span class="line"><span class="keyword">WHERE</span> unit <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><br>6.多重条件查询：AND(和)、OR(或)<br>AND两个条件都要满足；OR满足一个即可<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查询规格为<span class="number">120</span>的护套绝缘电线的物资编号、数量、地点</span><br><span class="line"><span class="keyword">SELECT</span> mat_num,amount,warehouse</span><br><span class="line"><span class="keyword">FROM</span> Stock</span><br><span class="line"><span class="keyword">WHERE</span> mat_name <span class="operator">=</span> <span class="string">&#x27;护套绝缘电线&#x27;</span> <span class="keyword">AND</span> speci <span class="operator">=</span> <span class="string">&#x27;120&#x27;</span>;</span><br></pre></td></tr></table></figure><br><strong>(4)排序  ORDER BY</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名 <span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>   <span class="comment">-- ASC升序;DESC降序</span></span><br></pre></td></tr></table></figure><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>查询“护套绝缘电线”的物资名称、单价，查询结果按单价降序排序</span><br><span class="line"><span class="keyword">SELECT</span> mat_name,unit</span><br><span class="line"><span class="keyword">FROM</span> Stock</span><br><span class="line"><span class="keyword">WHERE</span> mat_name <span class="operator">=</span> <span class="string">&#x27;护套绝缘电线&#x27;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> unit <span class="keyword">DESC</span>;</span><br><span class="line"><span class="number">2.</span>查询所有物资的信息，查询结果按所在仓库名降序排序，同一仓库的物资按库存量升序排序。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Stock</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> warehouse <span class="keyword">DESC</span>,amount (<span class="keyword">ASC</span>);  <span class="comment">-- 默认为升序，ASC可省略</span></span><br></pre></td></tr></table></figure><br>✒️ <strong>(5)TOP 子句的用法</strong><br>放在 SELECT 后<br><strong>TOP n 子句</strong>:在查询结果中输出前面的n条记录<br><strong>TOP n PERCENT 子句</strong>:在查询结果中输出前面占结果记录总数的n% 条记录<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">显示Stock表中库存量最大的两条记录</span><br><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">2</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Stock</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> amount <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><br>✒️ <strong>(6)聚集函数</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">放在 SELECT 后</span><br><span class="line">COUNT (DISTINCT|ALL * )     统计表中元组个数</span><br><span class="line">COUNT (列名)                  统计一列中值的个数</span><br><span class="line">SUM (列名)                    求和</span><br><span class="line">AVG (列名)                    求平均值</span><br><span class="line">MAX (列名)                    求最大值</span><br><span class="line">MIN (列名)                    求最小值</span><br><span class="line">DISTINCT 短语表示在计算时要取消指定列中的重复值</span><br><span class="line">WHERE后面不能使用聚集函数</span><br></pre></td></tr></table></figure><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>统计领取了物资的抢修工程项目数</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span> (<span class="keyword">DISTINCT</span> prj_num)</span><br><span class="line"><span class="keyword">FROM</span> Stock;</span><br><span class="line"><span class="number">2.</span>查询使用<span class="number">001</span>号物资的抢修工程的最高领取数量、最低领取数量、平均领取数量</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(amount),<span class="built_in">MIN</span>(amount),<span class="built_in">AVG</span>(amount)</span><br><span class="line"><span class="keyword">FROM</span> Stock</span><br><span class="line"><span class="keyword">WHERE</span> mat_num <span class="operator">=</span> <span class="string">&#x27;001&#x27;</span>;</span><br></pre></td></tr></table></figure><br>✒️ <strong>(7)分组  GROUP BY</strong><br>GROUP BY子句将查询结果按某一列或多列的值分组，值相等的为一组。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 列名</span><br><span class="line">[<span class="keyword">HAVING</span> 组提取条件]</span><br><span class="line"><span class="keyword">HAVING</span>可以使用聚集函数，<span class="keyword">WHERE</span>不能用</span><br></pre></td></tr></table></figure><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>查询每个抢修工程项目号和使用的物资种类</span><br><span class="line"><span class="keyword">SELECT</span> prj_num 项目号,<span class="built_in">COUNT</span> (<span class="operator">*</span>)物资种类</span><br><span class="line"><span class="keyword">FROM</span> Stock</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> prj_num;</span><br><span class="line"><span class="number">2.</span>查询使用了两种及两种以上物资的抢修工程项目号</span><br><span class="line"><span class="keyword">SELECT</span> prj_num</span><br><span class="line"><span class="keyword">FROM</span> Stock</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> prj_num</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="operator">&gt;=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure></p><h3 id="✒️2-2-连接查询-多表查询"><a href="#✒️2-2-连接查询-多表查询" class="headerlink" title="✒️2.2.连接查询(多表查询)"></a>✒️2.2.连接查询(多表查询)</h3><p>(1).等值与非等值连接查询<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">表名<span class="number">1.</span>列名<span class="number">1</span> 比较运算符 表名<span class="number">2.</span>列名<span class="number">2</span>;</span><br><span class="line">或 表名<span class="number">1.</span>列名<span class="number">1</span> <span class="keyword">BETWEEN</span> 表名<span class="number">2.</span>列名<span class="number">2</span> <span class="keyword">AND</span> 表名<span class="number">2.</span>列名<span class="number">3</span>;</span><br><span class="line">比较运算符 ＝ 、＞ 、＜ 、＞＝ 、＜＝ 、！＝(或＜＞)</span><br><span class="line">＝ 是 等值连接,其他为非等值连接</span><br><span class="line">在等值连接中把目标列中重复的属性去掉,则为自然连接</span><br></pre></td></tr></table></figure><br>(2).外连接查询<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">左外连接:<span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span></span><br><span class="line">右外连接:<span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span></span><br><span class="line">全外连接:<span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span></span><br></pre></td></tr></table></figure><br>(3).复合条件连接查询<br>WHERE 子句中可以有多个连接条件,称为复合条件查询<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查询项目号为“<span class="number">20100015</span>”的抢修项目所使用的物资编号、物资名称、规格和使用数量</span><br><span class="line"><span class="keyword">SELECT</span> Out_stock.mat_num,mat_name,speci,Out_stock.amount</span><br><span class="line"><span class="keyword">FROM</span> Stock,Out_stock</span><br><span class="line"><span class="keyword">WHERE</span> Stock.mat_num <span class="operator">=</span> Out_stock.mat_num <span class="keyword">AND</span> prj_num <span class="operator">=</span> <span class="string">&#x27;20100015&#x27;</span></span><br></pre></td></tr></table></figure><br>(4).自身连接查询<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">同一个表与自己进行连接</span><br><span class="line">必须给表取别名加以区分,必须加前缀</span><br></pre></td></tr></table></figure><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查询同时使用了物资编号为m001和m002的抢修工程的工程号</span><br><span class="line"><span class="keyword">SELECT</span> A.prj_num</span><br><span class="line"><span class="keyword">FROM</span> Out_stock A, Out_stock B</span><br><span class="line"><span class="keyword">WHERE</span> A.prj_num <span class="operator">=</span> B.prj_num <span class="keyword">AND</span> A.mat_num <span class="operator">=</span> <span class="string">&#x27;m001&#x27;</span> <span class="keyword">AND</span> B.mat_num <span class="operator">=</span> <span class="string">&#x27;m002&#x27;</span>;</span><br></pre></td></tr></table></figure></p><h3 id="✒️2-3-嵌套查询"><a href="#✒️2-3-嵌套查询" class="headerlink" title="✒️2.3.嵌套查询"></a>✒️2.3.嵌套查询</h3><p>子查询的 SELECT 语句不能使用 ORDER BY 子句,ORDER BY 子句只能对最终查询结果排序<br>(1).带谓词 IN 的嵌套查询<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">查询工程项目“观澜站光缆抢修”所使用的物资编号和物资名称</span><br><span class="line"><span class="keyword">SELECT</span> mat_num,mat_name</span><br><span class="line"><span class="keyword">FROM</span> Stock</span><br><span class="line"><span class="keyword">WHERE</span> mat_num <span class="keyword">IN</span></span><br><span class="line">      (<span class="keyword">SELECT</span> mat_num</span><br><span class="line">       <span class="keyword">FROM</span> Out_stock</span><br><span class="line">       <span class="keyword">WHERE</span> prj_num <span class="keyword">IN</span></span><br><span class="line">          (<span class="keyword">SELECT</span> prj_num</span><br><span class="line">           <span class="keyword">FROM</span> Salvaging</span><br><span class="line">           <span class="keyword">WHERE</span> prj_name <span class="operator">=</span> <span class="string">&#x27;观澜站光缆抢修&#x27;</span>));</span><br></pre></td></tr></table></figure><br>(2).带有 ANY 或 ALL 谓词的子查询<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; ANY  大于子查询结果中的某个值</span><br><span class="line">&gt; ALL  大于子查询结果中的所有值...</span><br></pre></td></tr></table></figure><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">查询其他仓库中比供电局 <span class="number">1</span># 仓库的某一物资库存量少的物资名称、规格和数量</span><br><span class="line"><span class="keyword">SELECT</span> mat_name,speci,amount</span><br><span class="line"><span class="keyword">FROM</span> Stock</span><br><span class="line"><span class="keyword">WHERE</span> warehouse <span class="operator">&lt;&gt;</span> <span class="string">&#x27;供电局 1# 仓库&#x27;</span></span><br><span class="line">        <span class="keyword">AND</span> amount <span class="operator">&lt;</span> <span class="keyword">ANY</span></span><br><span class="line">          (<span class="keyword">SELECT</span> amount</span><br><span class="line">           <span class="keyword">FROM</span> Stock</span><br><span class="line">           <span class="keyword">WHERE</span> warehouse <span class="operator">=</span> <span class="string">&#x27;供电局 1# 仓库&#x27;</span>);</span><br></pre></td></tr></table></figure></p><h3 id="2-4-集合查询"><a href="#2-4-集合查询" class="headerlink" title="2.4.集合查询"></a>2.4.集合查询</h3><p>并操作 UNION<br>交操作 INTERSECT<br>差操作 EXCEPT<br>集合操作会自动去除重复元组,保留时要用 ALL 关键词</p><h2 id="3-数据更新"><a href="#3-数据更新" class="headerlink" title="3.数据更新"></a>3.数据更新</h2><h3 id="3-1-插入数据"><a href="#3-1-插入数据" class="headerlink" title="3.1.插入数据"></a>3.1.插入数据</h3><p><strong>(1)插入单/多行元组</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">INTO</span> 表名 [属性列<span class="number">1</span>,属性列<span class="number">2.</span>..]</span><br><span class="line"><span class="keyword">VALUES</span> (常量<span class="number">1</span>,常量<span class="number">2.</span>..)</span><br><span class="line">       (常量<span class="number">1</span>,常量<span class="number">2.</span>..);</span><br></pre></td></tr></table></figure><br><strong>(2)插入子查询结果</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">INTO</span> 表名 [属性列<span class="number">1</span>,属性列<span class="number">2.</span>..]</span><br><span class="line">子查询;</span><br></pre></td></tr></table></figure></p><h3 id="✒️3-2-修改数据"><a href="#✒️3-2-修改数据" class="headerlink" title="✒️3.2.修改数据"></a>✒️3.2.修改数据</h3><p><strong>(1)修改单个元组的值</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span></span><br><span class="line"><span class="keyword">SET</span> 列名 <span class="operator">=</span> 表达式  <span class="comment">-- SET复制</span></span><br><span class="line">[<span class="keyword">WHERE</span> 条件] ;</span><br><span class="line"><span class="comment">---WHERE省略表示要修改表中所有元组</span></span><br></pre></td></tr></table></figure><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">将编号为 “m020” 的物资单价改为 <span class="number">44.5</span></span><br><span class="line"><span class="keyword">UPDATE</span></span><br><span class="line"><span class="keyword">SET</span> unit <span class="operator">=</span> <span class="number">44.5</span></span><br><span class="line"><span class="keyword">WHERE</span> mat_num <span class="operator">=</span> m020;</span><br></pre></td></tr></table></figure><br><strong>(2)修改多个元组的值</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">将所有物资的单价增加 <span class="number">1</span></span><br><span class="line"><span class="keyword">UPDATE</span> Stock</span><br><span class="line"><span class="keyword">SET</span> unit <span class="operator">=</span> unit <span class="operator">+</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><br><strong>(3)带子查询的修改</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">将供电局<span class="number">1</span>中的所有物资的领取数量置零</span><br><span class="line"><span class="keyword">UPDATE</span> Stock1</span><br><span class="line"><span class="keyword">SET</span> amount <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">WHERE</span> mat_num <span class="keyword">IN</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> mat_num</span><br><span class="line">    <span class="keyword">FROM</span> Stock2</span><br><span class="line">    <span class="keyword">WHERE</span> warehouse <span class="operator">=</span> <span class="string">&#x27;供电局1&#x27;</span>）; </span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h3 id="3-3-删除数据"><a href="#3-3-删除数据" class="headerlink" title="3.3.删除数据"></a>3.3.删除数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">WHERE</span> 条件 ;</span><br><span class="line"><span class="comment">---WHERE 省略表示删除表中所有元组</span></span><br></pre></td></tr></table></figure><h2 id="4-视图"><a href="#4-视图" class="headerlink" title="4.视图"></a>4.视图</h2><p>视图是从一个或几个基本表（或视图）导出的表，它与基本表不同，是一个虚表。<br>数据库中只存放视图的定义，不存放视图对应的数据，数据存放在原来的基本表中。</p><h3 id="4-1-创建视图"><a href="#4-1-创建视图" class="headerlink" title="4.1.创建视图"></a>4.1.创建视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> 视图名 [列名,列名...]</span><br><span class="line"><span class="keyword">AS</span> 子查询</span><br><span class="line">[WITN <span class="keyword">CHECK</span> OPTION] ;</span><br><span class="line"><span class="comment">---子查询可以是任意的 SELECT 语句,但不允许含有 ORDER BY 子句</span></span><br><span class="line"><span class="comment">---组成视图的属性列名要么全部省略,要么全部指定</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例题</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> s1_stock</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"> <span class="keyword">SELECT</span> mat_num,mat_name,speci,amount,unit</span><br><span class="line"> <span class="keyword">FROM</span> Stock</span><br><span class="line"> <span class="keyword">WHERE</span> warehouse <span class="operator">=</span> <span class="string">&#x27;供电局 1# 仓库&#x27;</span>;</span><br></pre></td></tr></table></figure><p>在创建视图时还可以用带有聚集函数和GROUP BY子句的查询来定义视图，称为分组视图。</p><h3 id="4-2-删除视图"><a href="#4-2-删除视图" class="headerlink" title="4.2.删除视图"></a>4.2.删除视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> 视图名;</span><br></pre></td></tr></table></figure><h3 id="4-3-查询视图-和查询表一样"><a href="#4-3-查询视图-和查询表一样" class="headerlink" title="4.3.查询视图(和查询表一样)"></a>4.3.查询视图(和查询表一样)</h3><p>✒️<strong>视图消解法</strong>，转换成等价的对基本表的查询<br>对视图的查询实际上就是对基本表的查询</p><h3 id="4-4-更新视图"><a href="#4-4-更新视图" class="headerlink" title="4.4.更新视图"></a>4.4.更新视图</h3><p>插入 INSERT<br>删除 DELETE<br>修改 UPDATE</p><h1 id="第四章、"><a href="#第四章、" class="headerlink" title="第四章、"></a>第四章、</h1><h2 id="✒️1-存储过程"><a href="#✒️1-存储过程" class="headerlink" title="✒️1.存储过程"></a>✒️1.存储过程</h2><p>(1).创建存储过程<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"> <span class="keyword">SQL</span> 语句</span><br></pre></td></tr></table></figure><br>(2).修改存储过程<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">PROCEDURE</span> 存储过程名</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"> <span class="keyword">SQL</span> 语句</span><br></pre></td></tr></table></figure><br>(3).删除存储过程<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> 存储过程名</span><br></pre></td></tr></table></figure></p><h2 id="✒️2-触发器"><a href="#✒️2-触发器" class="headerlink" title="✒️2.触发器"></a>✒️2.触发器</h2><p>AFTER 触发器<br>INSTEAD OF 触发器<br>(1).创建触发器<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> 触发器名</span><br><span class="line"><span class="keyword">ON</span> 表名<span class="operator">|</span>视图名</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"> <span class="keyword">SQL</span> 语句</span><br></pre></td></tr></table></figure></p><h1 id="第五章、范式"><a href="#第五章、范式" class="headerlink" title="第五章、范式"></a>第五章、范式</h1><h2 id="1-第一范式"><a href="#1-第一范式" class="headerlink" title="1.第一范式"></a>1.第一范式</h2><p>简称1NF，记作R∈1NF，关系模式R中的所有属性都是简单结构，不可再分的。<br>满足第一范式的关系R中既存在<strong>非主属性对码的完全函数依赖</strong>，又存在<strong>非主属性对码的部分函数依赖</strong>和<strong>传递函数依赖</strong>。<br>为了去掉过于复杂的函数依赖，向高一级的范式转化，范式越高，冗余越小。</p><h2 id="2-第二范式"><a href="#2-第二范式" class="headerlink" title="2.第二范式"></a>2.第二范式</h2><p>简称2NF,记作R∈2NF，如果关系模式R∈1NF，且每个非主属性都<strong>完全函数依赖于R的码</strong>，则称R属于第二范式。(在1NF基础上消除非主属性对主码的<strong>部分函数依赖</strong>)</p><h2 id="3-第三范式"><a href="#3-第三范式" class="headerlink" title="3.第三范式"></a>3.第三范式</h2><p>简称3NF,记作R∈3NF,如果关系模式R∈2NF，且每个非主属性都<strong>不传递函数依赖于R的候选码</strong>，则称R属于第三范式。(在2NF基础上消除非主属性对码的<strong>传递依赖</strong>)</p><h1 id="第六章、索引"><a href="#第六章、索引" class="headerlink" title="第六章、索引"></a>第六章、索引</h1><h2 id="1-索引的概念"><a href="#1-索引的概念" class="headerlink" title="1.索引的概念"></a>1.索引的概念</h2><p>（1）<strong>聚集索引</strong><br>聚集索引的特点是数据文件中的记录按照索引键指定的顺序排序，使具有相同索引键值的记录在物理上聚集在一起。<br>一个数据表只能有一种实际存储顺序，所以<strong>一个数据表只能建立一个聚集索引</strong>。<br>（2）<strong>非聚集索引</strong><br>非聚集索引不会影响数据表中记录的实际存储顺序，与存储顺序无关<br>有利于单行查询，不利于范围查询<br>一个表可以有多个非聚集索引<br>（3）<strong>唯一索引</strong><br>唯一索引不允许表中任何两行具有相同索引值的索引<br>主键索引是唯一索引的特定类型</p><h2 id="2-索引操作"><a href="#2-索引操作" class="headerlink" title="2.索引操作"></a>2.索引操作</h2><p>创建索引<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> 索引类型</span><br><span class="line">INDEX 索引名称 <span class="keyword">ON</span> 用于创建索引的表或视图 (用于创建索引的列 指定索引列的排列方式,<span class="keyword">ASC</span>升序、<span class="keyword">DESC</span>降序)</span><br><span class="line"><span class="comment">--- UNIQUE :创建一个唯一索引</span></span><br><span class="line"><span class="comment">--- CLUSTERED :聚集索引</span></span><br><span class="line"><span class="comment">--- NONCLUSTERED :非聚集索引</span></span><br></pre></td></tr></table></figure><br>查看索引<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USE 数据库名</span><br><span class="line"><span class="keyword">Exec</span>  sp_helpindex 所查表</span><br></pre></td></tr></table></figure><br>删除索引<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX 索引名</span><br></pre></td></tr></table></figure></p><h1 id="第七章-E-R图"><a href="#第七章-E-R图" class="headerlink" title="第七章 E-R图"></a>第七章 E-R图</h1><h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h2><p>实体：长方形表示<br>属性：椭圆表示<br>联系：菱形表示</p><h2 id="2-画E-R图"><a href="#2-画E-R图" class="headerlink" title="2.画E-R图"></a>2.画E-R图</h2><h2 id="3-转化为关系数据模型"><a href="#3-转化为关系数据模型" class="headerlink" title="3.转化为关系数据模型"></a>3.转化为关系数据模型</h2><p>（1）.E-R图的实体转换为关系（表名）<br>（2）.E-R图的属性转换为关系的属性<br>（3）.联系的转换<br>①联系种类：1:1、1:n(n:1)、n:m<br>②联系转换方法</p><ul><li>第一种方法，将联系转换成一个关系（表），这个关系的属性是相连的两个关系的主键和联系的属性。</li><li>第二种方法将一个关系的主键和联系的属性写到另一个关系中。<br>1:1两种方法都可<br>1:n两种方法都可，写到n那一边的属性里<br>n:m只能第一种方法</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符编码&amp;字符集</title>
      <link href="/posts/7ec7be7a/"/>
      <url>/posts/7ec7be7a/</url>
      
        <content type="html"><![CDATA[<h1 id="一、字符编码"><a href="#一、字符编码" class="headerlink" title="一、字符编码"></a>一、字符编码</h1><p>所有的数据在计算机中存储时都是以二进制形式存储的，文字也不例外。<br>所以一段文字在存储到内存中时，都需要转换为二进制编码。当我们读取这段文字时，计算机会将编码转换为字符，供我们阅读。</p><ul><li>编码：将字符转换为二进制码的过程称为编码</li><li>解码：将二进制码转换为字符的过程称为解码</li></ul><ol><li>字符集（charset）：编码和解码所采用的规则称为字符集（相当于密码本）</li><li>乱码：如果编码和解码所采用的字符集不同就会出现乱码问题。<br><strong>HTML</strong>中可以通过meta标签来设置网页的字符集，避免乱码问题<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="二、常见的字符集"><a href="#二、常见的字符集" class="headerlink" title="二、常见的字符集"></a>二、常见的字符集</h1><h2 id="1-ASCII"><a href="#1-ASCII" class="headerlink" title="1.ASCII"></a>1.ASCII</h2><p>ASCII(American Standard Code for Information Interchange)：美国信息交换标准代码</p><blockquote><p>在所有字符集中，最知名的可能要数被称为ASCII的<strong>8位字符</strong>了。美国信息交换标准代码是由美国国家标准学会(American National Standard Institute , ANSI )制定的，是一种标准的<strong>单字节字符编码</strong>方案，用于基于文本的数据。它最初是美国国家标准，供不同计算机在相互通信时用作共同遵守的西文字符编码标准，后来它被国际标准化组织（International Organization for Standardization, ISO）定为国际标准，称为ISO 646标准。适用于所有拉丁文字字母.</p></blockquote><p>ASCII 码使用指定的7 位或8 位二进制数组合来表示128 或256 种可能的字符。标准ASCII 码也叫基础ASCII码，使用7 位二进制数（剩下的1位二进制为0）来表示所有的大写和小写字母，数字0 到9、标点符号，以及在美式英语中使用的特殊控制字符.<br>ASCII码表：<a href="https://www.asciitable.com">Ascii Table</a></p><h2 id="2-ISO-8859-1"><a href="#2-ISO-8859-1" class="headerlink" title="2.ISO-8859-1"></a>2.ISO-8859-1</h2><p>欧洲人扩充ASCII到8位二进制数组合，能表示256种可能的字符<br>ISO-8859-1编码是单字节编码，向下兼容ASCII，其编码范围是0x00-0xFF，0x00-0x7F之间完全和ASCII一致，0x80-0x9F之间是控制字符，0xA0-0xFF之间是文字符号。<br>ISO码表：<a href="https://www.w3school.com.cn/charsets/ref_html_8859.asp">HTML ISO-8859-1 参考手册</a></p><h2 id="3-GB2312"><a href="#3-GB2312" class="headerlink" title="3.GB2312"></a>3.GB2312</h2><p>GB2312（信息交换用汉字编码字符集）是由中国国家标准总局1980年发布。基本集共收入汉字6763个和非汉字图形字符682个。GB2312的出现，基本满足了汉字的计算机处理需要，它所收录的汉字已经覆盖中国大陆99.75%的使用频率。</p><h2 id="4-GBK"><a href="#4-GBK" class="headerlink" title="4.GBK"></a>4.GBK</h2><blockquote><p>GBK（即“国标”、“扩展”汉语拼音的第一个字母），汉字编码字符集。2000年已被GB18030-2000国家强制标准替代。 2005年GB18030-2005发布，替代了GB18030-2000。</p></blockquote><p>GBK使用了<strong>双字节编码</strong>方案，其编码范围从8140至FEFE（剔除xx7F），共23940个码位，共收录了21003个汉字，完全兼容GB2312-80标准，支持国际标准ISO/IEC10646-1和国家标准GB13000-1中的全部中日韩汉字，并包含了BIG5编码中的所有汉字。</p><h2 id="5-UTF-8"><a href="#5-UTF-8" class="headerlink" title="5.UTF-8"></a>5.UTF-8</h2><p>UTF-8（8位元，Universal Character Set/Unicode Transformation Format）是针对Unicode的一种<strong>可变长度字符编码</strong>，也叫万国码、统一码。它可以用来表示Unicode标准中的任何字符，而且其编码中的第一个字节仍与<strong>ASCII相容</strong>，使得原来处理ASCII字符的软件无须或只进行少部分修改后，便可继续使用。<br><strong>现在统一全都用UTF-8</strong></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客git版本控制</title>
      <link href="/posts/4257a649/"/>
      <url>/posts/4257a649/</url>
      
        <content type="html"><![CDATA[<p>一、 .gitignore文件:把不用上传到仓库的文件或文件夹放到这个文件<br>因为魔改，把node_modules/从.gitignore中去掉（node_modules有用）<br>二、若博客文件夹丢失</p><ol><li>去github源码仓库复制下图中链接<br><img src="https://lskypro.s3-us-east-1.ossfiles.com/2023/02/21/63f448e550ff1.webp" alt="b2."></li><li>去要放博客的文件夹下克隆仓库<br>打开cmd,用git clone命令<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 复制的链接</span><br></pre></td></tr></table></figure></li><li>博客文件夹回来了，在cmd目录下安装依赖,就可以了<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li>运行命令<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo s</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea使用javadoc标签</title>
      <link href="/posts/4787801/"/>
      <url>/posts/4787801/</url>
      
        <content type="html"><![CDATA[<h1 id="1-如何使用-idea-生成javadoc-文档"><a href="#1-如何使用-idea-生成javadoc-文档" class="headerlink" title="1.如何使用 idea 生成javadoc 文档"></a>1.如何使用 idea 生成javadoc 文档</h1><p>1、打开 idea，点击 Tools-&gt; Generate JavaDoc，打开生成 javadoc 文档的配置页面。<br><img src="https://www.helloimg.com/images/2022/09/29/ZKlPb0.md.png" alt=""><br>2、配置<br>标注的是重要的部分，从上往下分别是配置 javadoc 的范围，输出文件夹路径以及命令行参数。<br>这里的命令行参数很重要，因为只有使用 utf-8 编码才能保证生成时可以正常处理中文字符，所以一定要加上：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-encoding utf-8 -charset utf-8</span><br></pre></td></tr></table></figure><br>3、配置好后，点击确认，生成好后就会自动在浏览器打开进行查看了，也可以在输出文件夹中点击html文件查看。<br><img src="https://www.helloimg.com/images/2022/09/29/ZKlEET.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记</title>
      <link href="/posts/6cb5a254/"/>
      <url>/posts/6cb5a254/</url>
      
        <content type="html"><![CDATA[<blockquote><p>快捷键:<br>1.先选中，再 ctrl + / 注释快捷键, 再次输入就取消注释<br>2.选中，然后输入 tab 整体右移;选中，然后输入 shift+tab 整体左移</p></blockquote><hr><h1 id="一、了解Java"><a href="#一、了解Java" class="headerlink" title="一、了解Java"></a>一、了解Java</h1><h2 id="1、Java重要特点"><a href="#1、Java重要特点" class="headerlink" title="1、Java重要特点"></a>1、Java重要特点</h2><ol><li>Java 语言是面向对象的(oop)</li><li>Java 语言是健壮的。Java 的强类型机制、异常处理、垃圾的自动收集等是 Java 程序健壮性的重要保证</li><li>Java 语言是<u>跨平台性的</u>。[即: 一个编译好的.class 文件可以在多个系统下运行，这种特性称为跨平台]<br><img src="https://lskypro.s3-us-east-1.ossfiles.com/2023/02/21/63f459c6233ce.webp" alt="a20."></li><li>Java 语言是解释型的[了解]<br>解释性语言：javascript,PHP, java 编译性语言: c / c++<br>区别是：解释性语言，编译后的代码，不能直接被机器执行,需要解释器来执行；编译性语言, 编译后的代码, 可 以直接被机器执行, c /c++</li></ol><h2 id="2、Java-运行机制及运行过程"><a href="#2、Java-运行机制及运行过程" class="headerlink" title="2、Java 运行机制及运行过程"></a>2、Java 运行机制及运行过程</h2><h3 id="2-1、Java-语言的特点：跨平台性"><a href="#2-1、Java-语言的特点：跨平台性" class="headerlink" title="2.1、Java 语言的特点：跨平台性"></a>2.1、Java 语言的特点：跨平台性</h3><p><img src="https://lskypro.s3-us-east-1.ossfiles.com/2023/02/21/63f459cfb598c.webp" alt="a19."></p><hr><h3 id="2-2、Java-核心机制-Java-虚拟机-JVM-java-virtual-machine"><a href="#2-2、Java-核心机制-Java-虚拟机-JVM-java-virtual-machine" class="headerlink" title="2.2、Java 核心机制-Java 虚拟机[JVM java virtual machine]"></a>2.2、Java 核心机制-Java 虚拟机[JVM java virtual machine]</h3><ol><li>JVM 是一个虚拟的计算机，具有指令集并使用不同的存储区域。负责执行指令，管理数据、内存、寄存器，包含在<u>JDK</u>中</li><li>对于不同的平台(系统)，有不同的虚拟机。</li><li>Java 虚拟机机制屏蔽了底层运行平台的差别，实现了“一次编译，到处运行”<br><img src="https://lskypro.s3-us-east-1.ossfiles.com/2023/02/21/63f459e8852d2.webp" alt="a18.编译指令、运行指令"></li></ol><h2 id="3、什么是-JDK，JRE"><a href="#3、什么是-JDK，JRE" class="headerlink" title="3、什么是 JDK，JRE"></a>3、什么是 JDK，JRE</h2><h3 id="3-1、JDK-基本介绍"><a href="#3-1、JDK-基本介绍" class="headerlink" title="3.1、JDK 基本介绍"></a>3.1、JDK 基本介绍</h3><ol><li>JDK 的全称(Java Development Kit)[ Java 开发工具包]<br>JDK = JRE + java 的开发工具 [java, javac,javadoc,javap 等]</li><li>JDK 是提供给 Java 开发人员使用的，其中包含了java的开发工具，也包括了JRE。所以安装了JDK，就不用在单独安装JRE了。</li></ol><h3 id="3-2、JRE-基本介绍"><a href="#3-2、JRE-基本介绍" class="headerlink" title="3.2、JRE 基本介绍"></a>3.2、JRE 基本介绍</h3><ol><li>JRE(Java Runtime Environment)[Java 运行环境]<br>JRE = JVM + Java 的核心类库[类]</li><li>包括Java虚拟机(JVM Java Virtual Machine)和Java程序所需的核心类库等，如果想要运行一个开发好的Java程序， 计算机中只需要安装JRE即可。</li></ol><h3 id="3-3、JDK、JRE-和-JVM-的包含关系"><a href="#3-3、JDK、JRE-和-JVM-的包含关系" class="headerlink" title="3.3、JDK、JRE 和 JVM 的包含关系"></a>3.3、JDK、JRE 和 JVM 的包含关系</h3><ol><li>JDK = JRE + 开发工具集（例如 Javac,java 编译工具等)</li><li>JRE = JVM + Java SE 标准类库（java 核心类库）</li><li>如果只想运行开发好的 .class 文件只需要JRE</li></ol><h1 id="二、Java入门"><a href="#二、Java入门" class="headerlink" title="二、Java入门"></a>二、Java入门</h1><h2 id="1、第一个程序"><a href="#1、第一个程序" class="headerlink" title="1、第一个程序"></a>1、第一个程序</h2><p>开发一个a1.java程序，可以输出“你好”<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java快速入门，演示java开发步骤</span></span><br><span class="line"><span class="comment">//对代码的相关说明</span></span><br><span class="line"><span class="comment">//1. public class a1 表示 a1 是一个类,是一个 public 公有的类</span></span><br><span class="line"><span class="comment">//2. a1 &#123; &#125; 表示一个类的开始和结束</span></span><br><span class="line"><span class="comment">//3. public static void main(String[] args) 表示一个主方法,即我们程序的入口</span></span><br><span class="line"><span class="comment">//4. main() &#123;&#125; 表示方法的开始和结束</span></span><br><span class="line"><span class="comment">//5. System.out.println(&quot;你好&quot;); 表示输出&quot;你好&quot;到屏幕</span></span><br><span class="line"><span class="comment">//6. ; 表示语句结束</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">a1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123; <span class="comment">//编写一个 main 方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><pre><code>文件有中文时，如何处理1.在文件-&gt;设置文件编码-&gt;GBK2.需要重新保存即可</code></pre><p><img src="https://lskypro.s3-us-east-1.ossfiles.com/2023/02/21/63f45a044785f.webp" alt="a16."></p><h2 id="2、Java-开发注意事项和细节说明"><a href="#2、Java-开发注意事项和细节说明" class="headerlink" title="2、Java 开发注意事项和细节说明"></a>2、Java 开发注意事项和细节说明</h2><pre><code>1.Java源文件以.java 为扩展名。源文件的基本组成部分是类（class），如本类中的Hello类。2.Java应用程序的执行入口是main()方法，它有固定的书写格式：public static void main(String[] args) &#123;...&#125;3.Java语言严格区分大小写。4.Java方法由一条条语句构成，每个语句以&quot;;&quot;结束。5.大括号都是成对出现的，缺一不可。[习惯，先写&#123;&#125;再写代码]6.一个源文件中最多只能有一个public类。其它类的个数不限。7.如果源文件包含一个public类，则文件名必须按该类名命名。8.一个源文件中最多只能有一个public类。其它类的个数不限，也可以将main方法写在非public类中，然后指定运行非public类，这样入口方法就是非public的main方法。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java快速入门，演示java开发步骤</span></span><br><span class="line"><span class="comment">//对代码的相关说明</span></span><br><span class="line"><span class="comment">//1. public class a1 表示 a1 是一个类,是一个 public 公有的类</span></span><br><span class="line"><span class="comment">//2. a1 &#123; &#125; 表示一个类的开始和结束</span></span><br><span class="line"><span class="comment">//3. public static void main(String[] args) 表示一个主方法,即我们程序的入口</span></span><br><span class="line"><span class="comment">//4. main() &#123;&#125; 表示方法的开始和结束</span></span><br><span class="line"><span class="comment">//5. System.out.println(&quot;你好&quot;); 表示输出&quot;你好&quot;到屏幕</span></span><br><span class="line"><span class="comment">//6. ; 表示语句结束</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">a1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; <span class="comment">//编写一个 main 方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一个源文件中最多只能有一个 public 类。其它类的个数不限。[演示]</span></span><br><span class="line"><span class="comment">//Dog 是一个类</span></span><br><span class="line"><span class="comment">//编译后，每一个类，都对于一个.class文件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一个源文件中最多只能有一个 public 类。其它类的个数不限，也可以将 main 方法写在非 public 类中，</span></span><br><span class="line">    <span class="comment">// 然后指定运行非 public 类，这样入口方法就是非 public 的 main 方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,小狗狗&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tiger</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,小狗狗&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、Java-转义字符"><a href="#3、Java-转义字符" class="headerlink" title="3、Java 转义字符"></a>3、Java 转义字符</h2><p>在控制台，输入 tab 键，可以实现命令补全</p><pre><code>\t ：一个制表位，实现对齐的功能 \n ：换行符 \\ ：一个\ \&quot; :一个&quot; \&#39; ：一个&#39; \r :一个回车</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//演示转义字符的使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChangeChar</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//   \t ：一个制表位，实现对齐的功能 (输出内容之间有固定宽度)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;北京\t天津\t上海&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//   \n ：换行符</span></span><br><span class="line">        System.out.println(<span class="string">&quot;jack\nsmith\nmary&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//   \\ ：一个\  (第一个\代表转义，第二个\代表\)  \\\\ :两个\</span></span><br><span class="line">        System.out.println(<span class="string">&quot;C:\\Windows\\System32\\cmd.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//   \&quot; : 一个&quot;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;老韩说:\&quot;要好好学习 java,有前途\&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//   \&#x27; ：一个&#x27;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;老韩说:\&#x27;要好好学习 java,有前途\&#x27;&quot;</span>); <span class="comment">//这里单引号也可以不用转义，可以直接用</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//   \r :一个回车</span></span><br><span class="line">        <span class="comment">// 解读</span></span><br><span class="line">        <span class="comment">// 1. 输出 韩顺平教育</span></span><br><span class="line">        <span class="comment">// 2. \r 表示回车</span></span><br><span class="line">        System.out.println(<span class="string">&quot;韩顺平教育\r北京&quot;</span>);  <span class="comment">//命令行窗口结果：北京平教育， idea输出结果：北京</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://lskypro.s3-us-east-1.ossfiles.com/2023/02/21/63f45b8c020b4.webp" alt="a1.运行结果"></p><h2 id="4、注释"><a href="#4、注释" class="headerlink" title="4、注释"></a>4、注释</h2><h3 id="4-1、单行注释和多行注释"><a href="#4-1、单行注释和多行注释" class="headerlink" title="4.1、单行注释和多行注释"></a>4.1、单行注释和多行注释</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">单行注释      //注释文字</span><br><span class="line">多行注释      /* 注释文字 */</span><br></pre></td></tr></table></figure><hr><pre><code>细节：1.被注释的文字，不会被 JVM（java 虚拟机）解释执行      2.多行注释里面不允许有多行注释嵌套</code></pre><h3 id="4-2、文档注释"><a href="#4-2、文档注释" class="headerlink" title="4.2、文档注释"></a>4.2、文档注释</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文档注释   /** */</span><br></pre></td></tr></table></figure><p><img src="https://lskypro.s3-us-east-1.ossfiles.com/2023/02/21/63f45b89bd7df.webp" alt="a2."><br><div class="tag link"><a class="link-card" title="idea使用javadoc标签" href="https://qxz23.github.io/posts/4787801/"><div class="left"><img src="https://lskypro.s3-us-east-1.ossfiles.com/2023/02/20/63f38cdbb0ee9.png"/></div><div class="right"><p class="text">idea使用javadoc标签</p><p class="url">https://qxz23.github.io/posts/4787801/</p></div></a></div></p><h3 id="4-3、-Java-代码规范（基本）"><a href="#4-3、-Java-代码规范（基本）" class="headerlink" title="4.3、 Java 代码规范（基本）"></a>4.3、 Java 代码规范（基本）</h3><p><img src="https://lskypro.s3-us-east-1.ossfiles.com/2023/02/21/63f45b7e04e4b.webp" alt="a5."><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 小明</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Comment02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//选中，然后输入 tab 整体右移</span></span><br><span class="line">        <span class="comment">// 选中，然后输入 shift+tab 整体左移</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">1</span> + <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">5</span> + <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n3</span> <span class="operator">=</span> <span class="number">1</span> + <span class="number">3</span> * <span class="number">34</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="三、变量"><a href="#三、变量" class="headerlink" title="三、变量"></a>三、变量</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">不论是使用哪种高级程序语言编写程序，变量都是其程序的基本组成单位，比如:</span><br><span class="line"><span class="comment">//变量有三个基本要素（类型+名称+值）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//定义了一个变量，类型int整型，名称a，值1</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;<span class="comment">//定义了一个变量，类型int谁整型名称b，值3</span></span><br><span class="line">        b = <span class="number">89</span><span class="comment">//把89值赋给b变量</span></span><br><span class="line">        System.out.println(a);<span class="comment">//输出a变量的值</span></span><br><span class="line">        System.out.println(b);<span class="comment">//输出b变量的值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1、变量的介绍"><a href="#1、变量的介绍" class="headerlink" title="1、变量的介绍"></a>1、变量的介绍</h2><h3 id="1-1、概念"><a href="#1-1、概念" class="headerlink" title="1.1、概念"></a>1.1、概念</h3><p>变量相当于内存中一个数据存储空间的表示，你可以把变量看做是一个房间的门牌号，通过门牌号我们可以找到房间，而通过变量名可以访问到变量(值)。</p><h3 id="1-2、变量使用的基本步骤"><a href="#1-2、变量使用的基本步骤" class="headerlink" title="1.2、变量使用的基本步骤"></a>1.2、变量使用的基本步骤</h3><ol><li>声明变量<br>int a;</li><li>赋值<br>a = 60; // 把 60 赋给 a<br>使用 System.out.println(a);<br>//也可以一步到位[int a = 60; 通常我们是一步完成]</li></ol><h3 id="1-3、变量快速入门"><a href="#1-3、变量快速入门" class="headerlink" title="1.3、变量快速入门"></a>1.3、变量快速入门</h3><p>演示记录 人的信息的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Var02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//记录人的信息</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">88.9</span>;</span><br><span class="line">        <span class="type">char</span> <span class="variable">gender</span> <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;king&quot;</span>;</span><br><span class="line">        <span class="comment">//输出信息（有快捷键）</span></span><br><span class="line">        System.out.println(<span class="string">&quot;人的信息如下：&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(age);</span><br><span class="line">        System.out.println(score);</span><br><span class="line">        System.out.println(gender);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://lskypro.s3-us-east-1.ossfiles.com/2023/02/21/63f45a32b76e6.webp" alt="a9.运行结果"></p><hr><p>变量使用注意事项</p><ol><li>变量表示内存中的一个存储区域[不同的变量，类型不同，占用的空间大小不同，<br>比如：int 4个字节，double就是8个字节]</li><li>该区域有自己的名称[变量名]和类型[数据类型]</li><li>变量必须先声明，后使用，即有顺序</li><li>该区域的数据/值可以在<kbd>同一类型</kbd>范围内不断变化</li><li>变量在同一个作用域内不能重名</li><li>变量=变量名+值+数据类型，这一点注意。变量<kbd>三要素</kbd><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VarDetail</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//变量必须先声明，后使用, 即有顺序</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">50</span>; <span class="comment">//int类型</span></span><br><span class="line">        System.out.println(a);<span class="comment">//输出50</span></span><br><span class="line">        <span class="comment">// 该区域的数据/值可以在同一类型范围内不断变化</span></span><br><span class="line">        <span class="comment">//a = &quot;jack&quot;; //×</span></span><br><span class="line">        a = <span class="number">88</span>; <span class="comment">//对</span></span><br><span class="line">        System.out.println(a);<span class="comment">//输出88</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//变量在同一个作用域内不能重名</span></span><br><span class="line">        <span class="comment">//int a = 77;//错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">666</span>;<span class="comment">//对</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="2、程序中-号的使用"><a href="#2、程序中-号的使用" class="headerlink" title="2、程序中 +号的使用"></a>2、程序中 +号的使用</h2><ol><li>当左右两边都是数值型时，则做加法运算</li><li>当左右两边有一方为字符串，则做拼接运算</li><li>运算顺序，是从左到右<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Plus</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="number">100</span> + <span class="number">98</span>);<span class="comment">//198</span></span><br><span class="line">        System.out.println(<span class="string">&quot;100&quot;</span> + <span class="number">98</span>);<span class="comment">//10098</span></span><br><span class="line">        System.out.println(<span class="number">100</span> + <span class="number">3</span> + <span class="string">&quot;hello&quot;</span>);<span class="comment">//103hello</span></span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span> + <span class="number">100</span> + <span class="number">3</span>);<span class="comment">//hello1003</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="3、✒️数据类型"><a href="#3、✒️数据类型" class="headerlink" title="3、✒️数据类型"></a>3、✒️数据类型</h2><p>每一种数据都定义了明确的数据类型，在内存中分配了不同大小的内存空间(字节)。<br><img src="https://lskypro.s3-us-east-1.ossfiles.com/2023/02/21/63f45a2eac39d.webp" alt="a10.背过这张图"></p><blockquote><p>String(字符串)准确来讲是一个类(class)</p></blockquote><h3 id="3-1、整数类型"><a href="#3-1、整数类型" class="headerlink" title="3.1、整数类型"></a>3.1、整数类型</h3><p>Java 的整数类型就是用于存放整数值的，比如 12 , 30, 3456 等等</p><h4 id="3-1-1、案例演示"><a href="#3-1-1、案例演示" class="headerlink" title="3.1.1、案例演示"></a>3.1.1、案例演示</h4><p>byte n1 = 10;//1个字节<br>short n2 = 10;//2个字节<br>int n3 = 10;//4 个字节<br>long n4 = 10; //8 个字节</p><h4 id="3-1-2、整型的类型"><a href="#3-1-2、整型的类型" class="headerlink" title="3.1.2、整型的类型"></a>3.1.2、整型的类型</h4><p><img src="https://lskypro.s3-us-east-1.ossfiles.com/2023/02/21/63f45a2a48557.webp" alt="a11."></p><h4 id="3-1-3、整型的使用细节"><a href="#3-1-3、整型的使用细节" class="headerlink" title="3.1.3、整型的使用细节"></a>3.1.3、整型的使用细节</h4><ol><li>Java各整数类型有固定的范围和字段长度，不受具体OS[操作系统]的影响，以保证java程序的可移植性。</li><li>Java的整型常量（具体值）默认为int型，声明long型常量须后加’l’或’L’</li><li>java程序中变量常声明为int型，除非不足以表示大数，才使用long(够用就行)</li><li>bit：计算机中的最小存储单位。byte：计算机中基本存储单元，1byte= 8 bit<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntDetail</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Java 的整型常量（具体值）默认为 int 型，声明 long 型常量须后加‘l’或‘L’</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//占4个字节</span></span><br><span class="line">        <span class="comment">//int n2 = 1L;//对不对?不对(1L是long类型，int装不下，报错）</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">n3</span> <span class="operator">=</span> <span class="number">1L</span>;<span class="comment">//对</span></span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-2、浮点类型"><a href="#3-2、浮点类型" class="headerlink" title="3.2、浮点类型"></a>3.2、浮点类型</h3><p>Java 的浮点类型可以表示一个小数，比如 123.4 ，7.8 ，0.12 等等</p><h4 id="3-2-1、浮点型的分类"><a href="#3-2-1、浮点型的分类" class="headerlink" title="3.2.1、浮点型的分类"></a>3.2.1、浮点型的分类</h4><p><img src="https://lskypro.s3-us-east-1.ossfiles.com/2023/02/21/63f45a23ae64f.webp" alt="a12."></p><pre><code>1.关于浮点数在机器中存放形式的简单说明,浮点数=符号位+指数位+尾数位2.尾数部分可能丢失，造成精度损失(小数都是近似值)。</code></pre><h4 id="3-2-2、浮点型使用细节"><a href="#3-2-2、浮点型使用细节" class="headerlink" title="3.2.2、浮点型使用细节"></a>3.2.2、浮点型使用细节</h4><ol><li>与整数类型类似，Java浮点类型也有固定的范围字段长度，不受具体OS的<br>影响，(float4个字节,double是8个字节)</li><li>Java 的浮点型常量(具体值)默认为 double 型，声明 float 型常量，须后加‘f’或‘F’</li><li>浮点型常量有两种表示形式<br>十进制数形式：如：5.12、 512.0f 、.512 (必须有小数点）<br>科学计数法形式:如：5.12e2 等于[5.12 * 10的2次方]，5.12e-2 等于[5.12 / 10 的2次方]</li><li>通常情况下，应该使用 double 型，因为它比 float 型更精确。</li><li>浮点数使用陷阱: 2.7 和 8.1 / 3 比较<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FloatDetail</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Java 的浮点型常量(具体值)默认为 double 型，声明 float 型常量，须后加‘f’或‘F&#x27;</span></span><br><span class="line">        <span class="comment">//float num1 = 1.1; //对不对?错误</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">1.1F</span>; <span class="comment">//对的</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">num3</span> <span class="operator">=</span> <span class="number">1.1</span>; <span class="comment">//对</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">num4</span> <span class="operator">=</span> <span class="number">1.1f</span>; <span class="comment">//对</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//十进制数形式：如：5.12 512.0f .512 (必须有小数点）</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">num5</span> <span class="operator">=</span> <span class="number">.123</span>; <span class="comment">//等价 0.123</span></span><br><span class="line">        System.out.println(num5);<span class="comment">//输出0.123</span></span><br><span class="line">        <span class="comment">//科学计数法形式:如：5.12e2 等于[5.12 * 10的2次方]，5.12e-2 等于[5.12 / 10 的2次方]</span></span><br><span class="line">        System.out.println(<span class="number">5.12e2</span>);<span class="comment">//输出512.0(因为是浮点型，所以带小数点)</span></span><br><span class="line">        System.out.println(<span class="number">5.12e-2</span>);<span class="comment">//输出0.0512</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//通常情况下，应该使用 double 型，因为它比 float 型更精确。</span></span><br><span class="line">        <span class="comment">//[举例说明]double num9 = 2.1234567851;float num10 = 2.1234567851F;</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">num9</span> <span class="operator">=</span> <span class="number">2.1234567851</span>;</span><br><span class="line">        <span class="type">float</span> <span class="variable">num10</span> <span class="operator">=</span> <span class="number">2.1234567851F</span>;</span><br><span class="line">        System.out.println(num9);</span><br><span class="line">        System.out.println(num10);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//浮点数使用陷阱: 2.7 和 8.1 / 3 比较</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">num11</span> <span class="operator">=</span> <span class="number">2.7</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">num12</span> <span class="operator">=</span> <span class="number">8.1</span> / <span class="number">3</span>; <span class="comment">//(数学上=2.7)</span></span><br><span class="line">        System.out.println(num11);<span class="comment">//2.7</span></span><br><span class="line">        System.out.println(num12);<span class="comment">//接近 2.7 的一个小数，而不是 2.7</span></span><br><span class="line">        <span class="comment">//得到一个重要的使用点: 当我们对运算结果是小数的进行相等判断时，要小心</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( num11 == num12) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;num11 == num12 相等&quot;</span>);</span><br><span class="line">        &#125;<span class="comment">//错误写法</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//应该是以两个数的差值的绝对值，在某个精度范围类判断</span></span><br><span class="line">        <span class="comment">//正确的写法 ,（先选中，再 ctrl + / 注释快捷键, 再次输入就取消注释）</span></span><br><span class="line">        <span class="keyword">if</span>(Math.abs(num11 - num12) &lt; <span class="number">0.000001</span> ) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;差值非常小，到我的规定精度，认为相等...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 可以通过 java API 来看</span></span><br><span class="line">        System.out.println(Math.abs(num11 - num12));</span><br><span class="line">        <span class="comment">//细节:如果是直接查询得的的小数或者直接赋值，是可以判断相等</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://lskypro.s3-us-east-1.ossfiles.com/2023/02/21/63f45a161f576.webp" alt="a13.运行结果"></li></ol><h3 id="3-3、Java-API-文档"><a href="#3-3、Java-API-文档" class="headerlink" title="3.3、Java API 文档"></a>3.3、Java API 文档</h3><ol><li>API（Application Programming Interface，应用程序编程接口）,是Java 提供的基本编程接口（java提供的类还有相关的方法）。<br>中文在线文档:<div class="tag link"><a class="link-card" title="MaTools 在线API" href="https://www.matools.com"><div class="left"><img src="https://lskypro.s3-us-east-1.ossfiles.com/2023/02/20/63f38cdbb0ee9.png"/></div><div class="right"><p class="text">MaTools 在线API</p><p class="url">https://www.matools.com</p></div></a></div></li><li>Java语言提供了大量的基础类，因此 Oracle公司也为这些基础类提供了相应的API文档，用于告诉开发者如何使用这些类，以及这些类里包含的方法.</li><li>Java类的组织形式[图]<br><img src="https://lskypro.s3-us-east-1.ossfiles.com/2023/02/21/63f45a0d05380.webp" alt="a14."></li><li>举例说明如何使用,如ArrayList类有哪些方法<br>(1)按照：包—&gt;类—&gt;方法   查找<br>(2)直接索引ArrayList</li></ol><h3 id="3-4、字符类型-char"><a href="#3-4、字符类型-char" class="headerlink" title="3.4、字符类型(char)"></a>3.4、字符类型(char)</h3>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML笔记</title>
      <link href="/posts/a0ca7bc4/"/>
      <url>/posts/a0ca7bc4/</url>
      
        <content type="html"><![CDATA[<h1 id="一、前端简介"><a href="#一、前端简介" class="headerlink" title="一、前端简介"></a>一、前端简介</h1><p>制订网页开发的标准:万维网联盟（W3C）,编写的网页都需要遵循W3C的规范</p><h2 id="1-网页的结构思想"><a href="#1-网页的结构思想" class="headerlink" title="1.网页的结构思想"></a>1.网页的结构思想</h2><p>根据W3C标准，一个网页主要由三部分组成：结构、表现、行为。<br><img src="https://lskypro.s3-us-east-1.ossfiles.com/2023/02/21/63f447cd5ea3f.webp" alt="c1."><br><strong>结构、表现、行为</strong></p><ul><li>结构（骨架）：HTML用于描述页面的结构。 [比较简单、固定]</li><li>表现（皮肤）：CSS用于控制页面中元素的样式。[所有能看见的]</li><li>行为（交互）：JavaScript用于响应用户操作。[最难,主要的]<br><img src="https://lskypro.s3-us-east-1.ossfiles.com/2023/02/21/63f447d156814.webp" alt="c3."></li></ul><h1 id="二、HTML简介"><a href="#二、HTML简介" class="headerlink" title="二、HTML简介"></a>二、HTML简介</h1><h2 id="1-基本结构"><a href="#1-基本结构" class="headerlink" title="1.基本结构"></a>1.基本结构</h2><p>HTML使用<strong>标签</strong>的形式来标识网页中的不同组成部分</p><pre><code>&lt;开始标签&gt;&lt;/结束标签&gt;根标签&lt;html&gt;&lt;/html&gt;两个子标签&lt;head&gt;&lt;/head&gt;;&lt;body&gt;&lt;/body&gt;&lt;head&gt;的子标签&lt;title&gt;&lt;/title&gt;标签一般成对出现，但也存在一些自结束标签:&lt;img&gt;&lt;input&gt;</code></pre><h3 id="1-1-迭代"><a href="#1-1-迭代" class="headerlink" title="1.1.迭代"></a>1.1.迭代</h3><p>网页的版本</p><ul><li>HTML4</li><li>XHTML2.0</li><li>HTML5</li></ul><h3 id="1-2-文档声明（doctype）"><a href="#1-2-文档声明（doctype）" class="headerlink" title="1.2.文档声明（doctype）"></a>1.2.文档声明（doctype）</h3><p>文档声明用来告诉浏览器当前网页的版本<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html5的文档声明 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 或者 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!Doctype <span class="keyword">HTML</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="1-3-注释"><a href="#1-3-注释" class="headerlink" title="1.3.注释"></a>1.3.注释</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--HTML的注释格式--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注释中的内容会被浏览器忽略，不会在网页中直接显示，</span></span><br><span class="line"><span class="comment">        可以在源码中查看注释，注释·要求简单明了，注释不能嵌套</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文档声明，声明当前网页的版本 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- html的根标签（元素），网页中的所有内容都要写根元素的里边 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- head是网页的头部，head中的内容不会在网页中直接出现，主要用来帮助浏览器或搜索引擎来解析网页 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- meta标签用来设置网页的元数据，这里meta用来设置网页的字符集，避免乱码问题 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- title中的内容会显示在浏览器的标题栏，搜索引擎会主要根据title中的内容来判断网页的主要内容 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>网页的标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- body是htm1的子元素，表示网页的主体，网页中所有的可见内容都应该写在body里 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- h1网页的一级标题 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>网页的大标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-标签属性"><a href="#2-标签属性" class="headerlink" title="2.标签属性"></a>2.标签属性</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>标签的属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--属性，在标签中（开始标签或自结束标签）还可以设置属性</span></span><br><span class="line"><span class="comment">            属性是一个名值对（x=y）</span></span><br><span class="line"><span class="comment">            属性用来设置标签中的内容如何显示</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            属性和标签名或其他属性应该用空格隔开</span></span><br><span class="line"><span class="comment">            属性名和属性值不能乱写，应该根据文档中的规定来编写，</span></span><br><span class="line"><span class="comment">            有些属性有属性值，有些没有；属性值用&quot;&quot;或&#x27;&#x27;引起来</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是我的<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span> <span class="attr">size</span>=<span class="string">&#x27;3&#x27;</span>&gt;</span>第三个<span class="tag">&lt;/<span class="name">font</span>&gt;</span>网页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/posts/9daba997/"/>
      <url>/posts/9daba997/</url>
      
        <content type="html"><![CDATA[<p>1.<u>文本内容</u></p><p>2.<emp>文本内容</emp></p><wavy>文本内容</wavy><del>文本内容</del><kbd>文本内容</kbd><psw>文本内容</psw><div class="timeline color]"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间线标题（可选）[</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>时间节点（标题）</p></div></div><div class='timeline-item-content'><p>正文内容</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>时间节点（标题）</p></div></div><div class='timeline-item-content'><p>正文内容</p></div></div></div><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/qxz23"><img src="https://github-readme-stats.vercel.app/api/?username=qxz23&theme=onedark&show_owner=true"/></a><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=algolia&show_owner=true"/></a><p>这是 <img no-lazy class="inline" src="https://jsdelivr.pai233.top/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一段话。</p><p>这又是 <img no-lazy class="inline" src="https://jsdelivr.pai233.top/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:40px;"/> 一段话。<br>3.链接卡片 link<br><div class="tag link"><a class="link-card" title="标题" href="链接"><div class="left"><img src="图片链接（可选）"/></div><div class="right"><p class="text">标题</p><p class="url">链接</p></div></a></div></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% 标题, 链接, https://lskypro.s3-us-east-1.ossfiles.com/2023/02/20/63f38cdbb0ee9.png %&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> butterfly </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>代码演示</title>
      <link href="/posts/be82d226/"/>
      <url>/posts/be82d226/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;<span class="comment">//import java.util.Scanner;import java.util.Scanner;import java.util.Scanner;import java.util.Scanner;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">int</span> min=sc.nextInt(); </span><br><span class="line"><span class="type">int</span> max=sc.nextInt(); </span><br><span class="line"><span class="type">int</span> factor=sc.nextInt(); </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=min;i&lt;=max;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i%factor==<span class="number">0</span>)&#123;</span><br><span class="line">System.out.print(i+<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">int</span> min=sc.nextInt(); </span><br><span class="line"><span class="type">int</span> max=sc.nextInt(); </span><br><span class="line"><span class="type">int</span> factor=sc.nextInt(); </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=min;i&lt;=max;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i%factor==<span class="number">0</span>)&#123;</span><br><span class="line">System.out.print(i+<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="import-java-util-Scanner"><a href="#import-java-util-Scanner" class="headerlink" title="import java.util.Scanner;"></a>import java.util.Scanner;</h2><p>public class Main {<br>    public static void main(String[] args) {<br>        Scanner sc = new Scanner(System.in);<br>        int min=sc.nextInt();<br>        int max=sc.nextInt();<br>        int factor=sc.nextInt(); </p><pre><code>    for(int i=min;i&lt;=max;i++)&#123;        if(i%factor==0)&#123;            System.out.print(i+&quot; &quot;);        &#125;    &#125;&#125;</code></pre><p>}</p><h3 id="import-java-util-Scanner-1"><a href="#import-java-util-Scanner-1" class="headerlink" title="import java.util.Scanner;"></a>import java.util.Scanner;</h3><p>public class Main {<br>    public static void main(String[] args) {<br>        Scanner sc = new Scanner(System.in);<br>        int min=sc.nextInt();<br>        int max=sc.nextInt();<br>        int factor=sc.nextInt(); </p><pre><code>    for(int i=min;i&lt;=max;i++)&#123;        if(i%factor==0)&#123;            System.out.print(i+&quot; &quot;);        &#125;    &#125;&#125;</code></pre><p>}</p><h2 id="import-java-util-Scanner-2"><a href="#import-java-util-Scanner-2" class="headerlink" title="import java.util.Scanner;"></a>import java.util.Scanner;</h2><p>public class Main {<br>    public static void main(String[] args) {<br>        Scanner sc = new Scanner(System.in);<br>        int min=sc.nextInt();<br>        int max=sc.nextInt();<br>        int factor=sc.nextInt(); </p><pre><code>    for(int i=min;i&lt;=max;i++)&#123;        if(i%factor==0)&#123;            System.out.print(i+&quot; &quot;);        &#125;    &#125;&#125;</code></pre><p>}</p><h3 id="import-java-util-Scanner-3"><a href="#import-java-util-Scanner-3" class="headerlink" title="import java.util.Scanner;"></a>import java.util.Scanner;</h3><p>public class Main {<br>    public static void main(String[] args) {<br>        Scanner sc = new Scanner(System.in);<br>        int min=sc.nextInt();<br>        int max=sc.nextInt();<br>        int factor=sc.nextInt(); </p><pre><code>    for(int i=min;i&lt;=max;i++)&#123;        if(i%factor==0)&#123;            System.out.print(i+&quot; &quot;);        &#125;    &#125;&#125;</code></pre><p>}</p><p><img src="https://www.helloimg.com/images/2022/04/12/R4FAzS.jpg" alt="图片名称1111"></p>]]></content>
      
      
      <categories>
          
          <category> butterfly </category>
          
          <category> 11 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇</title>
      <link href="/posts/73626faf/"/>
      <url>/posts/73626faf/</url>
      
        <content type="html"><![CDATA[<p>我的博客<br>1、清理缓存<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl</span><br></pre></td></tr></table></figure><br>hexo cl 是 hexo clean 的简写<br>(新建文章:hexo n “标题”)</p><p>2、生成静态页面<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><br>hexo g 是 hexo generate 的简写</p><p>3、在本地映射（预览）<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><br>hexo s 是 hexo server 的简写</p><p>4、部署推送<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><br>hexo d 是 hexo deploy 的简写</p><p>5、以上连写示例一（清理缓存 + 生成静态页面 + 在本地预览）<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><br>6、以上连写示例二（清理缓存 + 生成静态页面 + 部署推送）<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><br>gulp压缩<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><br>11112233344400040.1.2323202212847598744541445898</p><p><div class="tk-input el-textarea">&lt;textarea aut✒️ | 支持使用标准Markdown语法书写<br>📧 | 本站已开启邮箱提醒，评论若被回复将发送邮件通知<br>🐧 | 在昵称栏填写QQ号并回车，将自动获取QQ头像及邮箱” </p><p>7·文章置顶<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: 第一篇</span><br><span class="line">date: 2022/4/12 9:37:37</span><br><span class="line">sticky: 1</span><br></pre></td></tr></table></figure><br>8·建立分类及多级分类<br>在categories文件夹下建立md文件，可建立多个，命名自取，格式如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 未来</span><br><span class="line">date: 2022-04-14 13:19:08</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>打开文章md文件<br>一级分类:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 第一篇</span><br><span class="line">date: 2022/4/14 9:37:37</span><br><span class="line">categories: 未来</span><br><span class="line">---</span><br></pre></td></tr></table></figure><br>多级分类：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 第一篇</span><br><span class="line">date: 2022/4/14 9:37:37</span><br><span class="line">categories: </span><br><span class="line">- [母分类,子分类,子子分类]</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><hr><p>多个标签<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 第一篇</span><br><span class="line">date: 2022/4/14 9:37:37</span><br><span class="line">tags:</span><br><span class="line">  - tags1</span><br><span class="line">  - tags2</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>9、快捷键</p><table><tr><td bgcolor=orange>ctrl+x 剪切Ctrl+z 撤销Ctrl+s 保存Ctrl+f 查找Alt+F4 关闭窗口Windows+R cmdWindows+E 打开我的电脑Ctrl+shift+Esc 打开任务管理器Windows+Tab 切换应用程序</td></tr></table><p>常用的DOS命令，打开cmd（鼠标右键=粘贴）<br>1.盘符切换 </p><table><tr><td bgcolor=orange>盘名：+Enter(英文冒号)，例如打开D盘  输入D: 再点Enter</td></tr></table>2.查看当前目录下的所有文件<table><tr><td bgcolor=orange>在盘目录下输入dir,再点回车</td></tr></table>3.切换盘目录<table><tr><td bgcolor=orange>输入 cd /d 盘名:    例如切换到D盘输入cd /d D:或cd /d D:\文件名</td></tr></table>4.查看电脑IP<table><tr><td bgcolor=orange>输入ipconfig</td></tr></table>5.查看指定的目录下所有的子级目录 tree<table><tr><td bgcolor=orange>tree+盘名\文件名</td></tr></table>6.清屏 cls7.退出DOS exit8.(md[创建目 录],rd[删除目录],copy[拷贝文件],del[删除文件],echo[输入内容到文件],type,move[剪切]) => Linux,9.![](https://www.helloimg.com/images/2022/09/29/ZKTF1E.md.png)10.Markdown添加背景色<table><tr><td bgcolor=orange></td></tr></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=orange&gt;内容&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span><br></pre></td></tr></table></figure><p>npm命令<br>【npm install xxx】利用 npm 安装xxx模块到当前命令行所在目录；</p><p>【npm install -g xxx】利用npm安装全局模块xxx；</p><p>【npm install xxx】安装但不写入package.json；</p><p>【npm install xxx –save】 安装并写入package.json的”dependencies”中；</p><p>【npm install xxx –save-dev】安装并写入package.json的”devDependencies”中。</p><p>npm 删除模块<br>【npm uninstall xxx】删除xxx模块；<br>【npm uninstall -g xxx】删除全局模块xxx；</p>]]></content>
      
      
      <categories>
          
          <category> 22 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156/"/>
      <url>/posts/4a17b156/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
